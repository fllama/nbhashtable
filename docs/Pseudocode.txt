class Set {

// word bounds[size] // ⟨bound,scanning⟩
struct BucketT {
	word vs // ⟨version,state⟩ 
	Key key
} buckets[size]
// word buckets[size] // ⟨key,state⟩
	
void InitProbeBound(int h): {
	bounds[h] := ⟨0,false⟩
}
	
// Maximum offset of any collision in probe seq. 
int GetProbeBound(int h): {
	⟨bound,scanning⟩ := bounds[h]
	return bound
}

// Ensure maximum ≥ index
void ConditionallyRaiseBound(int h, int index): {
	do {
		⟨old_bound,scanning⟩ := bounds[h]
		new_bound := max(old_bound,index)
	} while ¬CAS(&bounds[h],⟨old_bound,scanning⟩,⟨new_bound,false⟩)
}

// Allow maximum < index 
void ConditionallyLowerBound(int h, int index): {
	⟨bound,scanning⟩ := bounds[h]
	if scanning = true {
		CAS(&bounds[h],⟨bound,true⟩,⟨bound,false⟩)
	}
	
	// If maximum = index > 0, set maximum < index
	if index > 0 {
		while CAS(&bounds[h],⟨index,false⟩,⟨index,true⟩) {
			// Scanning phase: scan cells for new maximum 
			i := index-1 
			while i > 0 ∧ ¬DoesBucketContainCollision(h, i) {
				i--
			}
			CAS(&bounds[h],⟨index,true⟩,⟨i,false⟩)
		}
	}
}

// Size must be a power of 2
BucketT* Bucket(int h, int index): {
	return &buckets[(h + index*(index+1)/2) % size] // Quadratic probing
}

bool DoesBucketContainCollision(int h, int index): {
	⟨version1,state1⟩ := Bucket(h,index)→vs
	if state1 = visible ∨ state1 = inserting ∨ state1 = member {
		if Hash(Bucket(h,index)→key) = h {
			⟨version2,state2⟩ := Bucket(h,index)→vs
			if state2 = visible ∨ state2 = inserting ∨ state2 = member {
				if version1 = version2 {
					return true
				}
			}
		}
	}
	return false
}

public:
void Init(): {
	for i := 0 .. size-1 {
		InitProbeBound(i) 
		buckets[i].vs := ⟨0,empty⟩
	}
}

// Determine whether k is a member of the set 
bool Lookup(Key k): {
	h := Hash(k)
	max := GetProbeBound(h)
	for i := 0 .. max {
		// Read cell atomically
		⟨version,state⟩ := Bucket(h,index)→vs  
		if state = member ∧ Bucket(h,index)→key = k {
			if Bucket(h,index)→vs = ⟨version,member⟩ {
				return true
			}
		}
	}
	return false
}


// Remove k from the set if it is a member h := Hash(k)
bool Erase(Key k): {
	max := GetProbeBound(h)
	for i := 0 .. max {
		⟨version,state⟩ := Bucket(h,index)→vs // Atomically read/update cell if state = member ∧ Bucket(h,index)→key = k
		if CAS(Bucket(h,i)→vs, ⟨version,member⟩, ⟨version,busy⟩) ConditionallyLowerBound(h,i) {
			Bucket(h,i)→vs := ⟨version+1,empty⟩
			return true
		}
	}
	return false
}

// Insert k into the set if it is not a member 
bool Insert(Key k): {
	h := Hash(k)
	i := -1 // Reserve a cell
	do {
		if ++i ≥ size {
		throw ”Table full”
		}
		⟨version,state⟩ := Bucket(h,i)→vs
	} while ¬CAS(&Bucket(h,i)→vs, ⟨version,empty⟩, ⟨version,busy⟩) 
	Bucket(h,i)→key := k
	
	// Attempt to insert a unique copy of k
	while true {
		*Bucket(h,i)→vs := ⟨version,visible⟩ 
		ConditionallyRaiseBound(h,i) 
		*Bucket(h,i)→vs := ⟨version,inserting⟩ 
		r := Assist(k,h,i,version)
		if Bucket(h,i)→vs ̸= ⟨version,collided⟩ {
			return true
		}
		if ¬r {
			ConditionallyLowerBound(h,i) 
			Bucket(h,i)→vs := ⟨version+1,empty⟩ 
			return false
		}
		version++
	}
}

private:
	
// Attempt to insert k at i
bool Assist(Key k,int h,int i,int ver i): {
	// Return true if no other cell seen in member state
	max := GetProbeBound(h) // Scan through probe sequence 
	for j:=0..max {
		if i ̸= j {
			⟨ver j,state j⟩ := Bucket(h,j)→vs
			if state j = inserting ∧ Bucket(h,j)→key = k {
				if j < i {
					// Assist any insert found earlier in the probe sequence 
					if Bucket(h,j)→vs = ⟨ver j,inserting⟩ {
						CAS(&Bucket(h,i)→vs, ⟨ver i,inserting⟩, ⟨ver i,collided⟩)
						return Assist(k,h,j,ver j)
					} else {
						// Fail any insert found later in the probe sequence
						if Bucket(h,i)→vs = ⟨ver i,inserting⟩ {
							CAS(&Bucket(h,j)→vs, ⟨ver j,inserting⟩, ⟨ver j,collided⟩)
						}
					}
				}			
			}
			
			⟨ver j,state j⟩ := Bucket(h,j)→vs // Abort if k already a member 
			if state j = member ∧ Bucket(h,j)→key = k {
				if Bucket(h,j)→vs = ⟨ver j,member⟩ {
					CAS(&Bucket(h,i)→vs,⟨ver i,inserting⟩,⟨ver i,collided⟩) 
					return false
				}
			}
			
		}
	}
	
	CAS(&Bucket(h,i), ⟨ver i,inserting⟩, ⟨ver i,member⟩)
	return true
}

/*
Erase(Key k)
	GetProbeBound();
	ConditionallyLowerBound()
*/